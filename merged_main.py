import fitz
import io
import os
import tempfile
import convertapi
import csv
import json
import logging
from telegram import Update, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)
from config import BOT_TOKEN, CONVERTAPI_SECRET

convertapi.api_credentials = CONVERTAPI_SECRET

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

pdf_files = []


async def logging_request(user, request):
    logger.info(f"{user.full_name}(@{user.username}) –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–ø—Ä–æ—Å '{request}'")


## PDF Merger ##
def merge_pdfs(pdf_files: list[bytes]):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–π—Ç–æ–≤ PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω"""
    merged_doc = fitz.open()
    for pdf_file in pdf_files:
        try:
            pdf_document = fitz.open(stream=pdf_file, filetype="pdf")
            merged_doc.insert_pdf(pdf_document)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            continue
    merged_pdf_bytes = merged_doc.tobytes()
    merged_doc.close()
    return merged_pdf_bytes


async def pdf_merger_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤"""
    keyboard = [
        ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å"],
        ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
        ["–í—ã–π—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)
    pdf_files.clear()
    context.user_data['state'] = 'pdf_merger_menu'


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    if context.user_data.get('state') == 'waiting_for_pdfs' and text == "–ì–æ—Ç–æ–≤–æ!":
        await merge(update, context)
        return

    if text == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤, –∏ —è –æ–±—ä–µ–¥–∏–Ω—é –∏—Ö –≤ –æ–¥–∏–Ω. "
                                            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ!'",
                                       reply_markup=ReplyKeyboardRemove())
        pdf_files.clear()
        context.user_data['state'] = 'waiting_for_pdfs'
    elif text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...")
    elif text == "–í—ã–π—Ç–∏" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = 'menu'
    elif context.user_data.get('state') == 'format_converter_waiting' and text == "–í—ã–π—Ç–∏":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = 'menu'


async def pdf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ PDF-—Ñ–∞–π–ª—ã"""
    global pdf_files
    file_id = update.message.document.file_id
    file = await context.bot.get_file(file_id)
    file_bytes = await file.download_as_bytearray()
    pdf_files.append(bytes(file_bytes))

    keyboard = [["–ì–æ—Ç–æ–≤–æ!"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. ‚úÖ", reply_markup=reply_markup)


async def merge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö PDF-—Ñ–∞–π–ª–æ–≤"""
    global pdf_files
    if not pdf_files:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. üòî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ PDF-—Ñ–∞–π–ª—ã.",
                                       reply_markup=ReplyKeyboardRemove())
        return

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–û–±—ä–µ–¥–∏–Ω—è—é —Ñ–∞–π–ª—ã... ‚è≥",
                                   reply_markup=ReplyKeyboardRemove())
    try:
        merged_pdf = merge_pdfs(pdf_files)
        if merged_pdf:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(io.BytesIO(merged_pdf), filename="merged_document.pdf"),
                caption="–í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª! üìÅ"
            )
            pdf_files.clear()
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. ‚ùå",
                                           reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} üò¢",
                                       reply_markup=ReplyKeyboardRemove())
    finally:
        pdf_files.clear()
        context.user_data['state'] = 'menu'


## Format Converter ##
async def format_converter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–í—ã–π—Ç–∏']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–µ –≤ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç. üì∏',
                                    reply_markup=reply_markup)
    context.user_data['state'] = 'format_converter_waiting'


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'format_converter_waiting':
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        return

    temp_file_path = None
    converted_file_path = None

    try:
        file_id = update.message.photo[-1].file_id
        file_info = await context.bot.get_file(file_id)
        downloaded_file = await file_info.download_as_bytearray()
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            temp_file.write(downloaded_file)
            temp_file_path = temp_file.name
        converted_file = convertapi.convert(
            'png', {'File': temp_file_path}
        )
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as converted_temp_file:
            converted_file_path = converted_temp_file.name
            converted_file.save_files(converted_file_path)
        with open(converted_file_path, 'rb') as f:
            await context.bot.send_document(chat_id=update.effective_chat.id,
                                            document=InputFile(f, filename="converted_image.png"))

    except Exception as e:
        await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e} üò•')
    finally:
        if temp_file_path:
            try:
                os.remove(temp_file_path)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        if converted_file_path:
            try:
                os.remove(converted_file_path)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


## File Reader / Creator ##
async def reading_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    context.user_data['state'] = 'reading_files'
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.txt, .csv, .json), –∞ —è –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")


async def create_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    context.user_data['state'] = 'create_files'
    keyboard = [
        ["/create_csv"],
        ["/create_json"],
        ["/create_txt"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)


async def reading_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Ç–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ TXT-—Ñ–∞–π–ª–∞"""
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'text/plain':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            user = update.effective_user
            await logging_request(user, 'reading_txt')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def reading_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Ç–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV-—Ñ–∞–π–ª–∞"""
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'text/csv':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            csv_data = list(csv.reader(text.splitlines()))
            formatted_csv = "\n".join([", ".join(row) for row in csv_data])
            user = update.effective_user
            await logging_request(user, 'reading_csv')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=formatted_csv)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def reading_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∏—Ç–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON-—Ñ–∞–π–ª–∞"""
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'application/json':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            json_data = json.loads(text)
            formatted_json = json.dumps(json_data, indent=4, ensure_ascii=False)
            user = update.effective_user
            await logging_request(user, 'reading_json')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=formatted_json)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def create_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV-—Ñ–∞–π–ª–∞"""
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV —Ñ–∞–π–ª–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∑–∞–ø—è—Ç—ã–º–∏):")
    await logging_request(user, 'create_csv')
    context.user_data['state'] = 'create_csv'


async def create_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ JSON-—Ñ–∞–π–ª–∞"""
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON —Ñ–∞–π–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):")
    await logging_request(user, 'create_json')
    context.user_data['state'] = 'create_json'


async def create_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ TXT-—Ñ–∞–π–ª–∞"""
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TXT —Ñ–∞–π–ª–∞:")
    await logging_request(user, 'create_txt')
    context.user_data['state'] = 'create_txt'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    text = update.message.text
    user = update.effective_user
    if not context.user_data.get('state'):
        await logging_request(user, 'handle_message')

    if context.user_data.get('state') == 'create_csv':
        try:
            data = [row.split(',') for row in text.split('\n')]
            with open('output.csv', 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerows(data)
            with open('output.csv', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.csv')
            context.user_data['state'] = 'menu'
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif context.user_data.get('state') == 'create_json':
        try:
            json_data = json.loads(text)
            with open('output.json', 'w', encoding='utf-8') as file:
                json.dump(json_data, file, indent=4, ensure_ascii=False)
            with open('output.json', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.json')
            context.user_data['state'] = 'menu'
        except json.JSONDecodeError:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

    elif context.user_data.get('state') == 'create_txt':
        with open('output.txt', 'w', encoding='utf-8') as file:
            file.write(text)
        with open('output.txt', 'rb') as file:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
        os.remove('output.txt')
        context.user_data['state'] = 'menu'


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! üëã –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç!\n\n'
                                    '*–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:*\n'
                                    '- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–æ–≤.\n'
                                    '- –ß—Ç–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (TXT, CSV, JSON).\n'
                                    '- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',
                                    parse_mode='MarkdownV2')
    context.user_data['state'] = 'menu'


if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    start_handler = CommandHandler('start', start)
    pdf_merger_start_handler = CommandHandler('pdf_merger', pdf_merger_start)
    format_converter_start_handler = CommandHandler('format_converter', format_converter_start)
    reading_files_handler = CommandHandler('read_files', reading_files)
    create_files_handler = CommandHandler('create_files', create_files)
    create_csv_handler = CommandHandler('create_csv', create_csv)
    create_json_handler = CommandHandler('create_json', create_json)
    create_txt_handler = CommandHandler('create_txt', create_txt)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    pdf_handler_instance = MessageHandler(filters.Document.MimeType("application/pdf"), pdf_handler)
    txt_handler = MessageHandler(filters.Document.MimeType("text/plain"), reading_txt)
    csv_handler = MessageHandler(filters.Document.MimeType("text/csv"), reading_csv)
    json_handler = MessageHandler(filters.Document.MimeType("application/json"), reading_json)
    photo_handler = MessageHandler(filters.PHOTO, photo)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(start_handler)
    application.add_handler(pdf_merger_start_handler)
    application.add_handler(format_converter_start_handler)
    application.add_handler(reading_files_handler)
    application.add_handler(create_files_handler)
    application.add_handler(create_csv_handler)
    application.add_handler(create_json_handler)
    application.add_handler(create_txt_handler)
    application.add_handler(pdf_handler_instance)
    application.add_handler(txt_handler)
    application.add_handler(csv_handler)
    application.add_handler(json_handler)
    application.add_handler(photo_handler)
    application.add_handler(text_handler)
    application.run_polling()
