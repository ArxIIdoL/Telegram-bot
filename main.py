import csv
import io
import json
import logging
import os
import tempfile

import convertapi
import fitz
import pandas as pd
from PIL import Image
from telegram import Update, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, CONVERTAPI_SECRET
from data import db_session
from data.logging import Logging
from data.users import User

convertapi.api_credentials = CONVERTAPI_SECRET
pdf_files = []

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


async def logging_request(user, request):
    db_sess = db_session.create_session()
    new_log = Logging(
        applying_user=user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request=request  # –ò–º—è –∑–∞–ø—Ä–æ—Å–∞
    )
    db_sess.add(new_log)
    db_sess.commit()


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'menu'
    db_sess = db_session.create_session()
    user = update.effective_user
    if not db_sess.query(User).filter(User.account_id == user.id).first():
        new_user = User(
            account_id=user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            nickname=user.username,  # username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@–Ω–∏–∫–Ω–µ–π–º)
            surname=user.last_name,  # —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            name=user.first_name,  # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        db_sess.add(new_user)
        db_sess.commit()
    text = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã! –Ø ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏.
    –í–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    \t* –ó–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω
    \t* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞—à–∏—Ö TXT –∏ CSV —Ñ–∞–π–ª–æ–≤
    \t* –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ PDF-—Ñ–∞–π–ª–æ–≤
    \t* –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö CSV, JSON –∏ TXT —Ñ–∞–π–ª–æ–≤
    \t* –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–µ–∂–∏–º
    \t* –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏.
    """
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=text, reply_markup=ReplyKeyboardRemove())
    await logging_request(user, 'help')


async def reading_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'reading_files'
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.txt, .json), –∞ —è –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")


async def create_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'create_files'
    keyboard = [
        ["/create_csv"],
        ["/create_json"],
        ["/create_txt"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)


async def pdf_merger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ì–æ—Ç–æ–≤–æ!"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤, –∏ —è –æ–±—ä–µ–¥–∏–Ω—é –∏—Ö –≤ –æ–¥–∏–Ω."
                                   " –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ!'",
                                   reply_markup=reply_markup)
    pdf_files.clear()
    context.user_data['state'] = 'pdf_merger'


async def reading_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'text/plain':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            user = update.effective_user
            await logging_request(user, 'reading_txt')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def csv_waiting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['csv_waiting'] = True
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ csv —Ñ–∞–π–ª, –∏ —è –¥–∞–º —Ç–µ–±–µ –µ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å!")


CSV_MAX_SIZE_MB, csv_file = 5, None  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö


async def reading_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('csv_waiting'):
        global csv_file
        context.user_data['csv_waiting'], context.user_data['state'] = False, 'csv_manipulation'
        document = update.message.document
        chat_id = update.effective_chat.id

        if not document:
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
            return

        file_obj = await document.get_file()
        file_size_mb = file_obj.file_size / (1024 * 1024)

        if file_size_mb > CSV_MAX_SIZE_MB:
            await context.bot.send_message(chat_id=chat_id,
                                           text=f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({round(file_size_mb)} MB)! "
                                                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {CSV_MAX_SIZE_MB} MB.")
            return

        temp_file_path = f"{chat_id}_input.csv"
        await file_obj.download_to_drive(temp_file_path)

        try:
            csv_file = pd.read_csv(temp_file_path)
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
            await csv_manipulation(update, context)
        except csv_file.errors.EmptyDataError:
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        except csv_file.errors.ParserError:
            await context.bot.send_message(chat_id=chat_id,
                                           text="–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV.")
        finally:
            os.remove(temp_file_path)
            user = update.effective_user
            await logging_request(user, 'csv_manipulation')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def csv_manipulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'csv_manipulation'
    keyboard = [
        ["–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫"],
        ["–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫"],
        ["–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫"],
        ["–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫"],
        ["–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫"],
        ["–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)


async def reading_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'application/json':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            json_data = json.loads(text)
            formatted_json = json.dumps(json_data, indent=4, ensure_ascii=False)
            user = update.effective_user
            await logging_request(user, 'reading_json')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=formatted_json)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def create_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV —Ñ–∞–π–ª–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∑–∞–ø—è—Ç—ã–º–∏):")
    await logging_request(user, 'create_csv')
    context.user_data['state'] = 'create_csv'


async def create_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON —Ñ–∞–π–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):")
    await logging_request(user, 'create_json')
    context.user_data['state'] = 'create_json'


async def create_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TXT —Ñ–∞–π–ª–∞:")
    await logging_request(user, 'create_txt')
    context.user_data['state'] = 'create_txt'


def merge_pdfs(pdf_files: list[bytes]):
    merged_doc = fitz.open()
    for pdf_file in pdf_files:
        try:
            pdf_document = fitz.open(stream=pdf_file, filetype="pdf")
            merged_doc.insert_pdf(pdf_document)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            continue
    merged_pdf_bytes = merged_doc.tobytes()
    merged_doc.close()
    return merged_pdf_bytes


async def merge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pdf_files
    if not pdf_files:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. üòî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ PDF-—Ñ–∞–π–ª—ã.",
                                       reply_markup=ReplyKeyboardRemove())
        return

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–û–±—ä–µ–¥–∏–Ω—è—é —Ñ–∞–π–ª—ã... ‚è≥",
                                   reply_markup=ReplyKeyboardRemove())
    try:
        merged_pdf = merge_pdfs(pdf_files)
        if merged_pdf:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(io.BytesIO(merged_pdf), filename="merged_document.pdf"),
                caption="–í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª! üìÅ"
            )
            pdf_files.clear()
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. ‚ùå",
                                           reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} üò¢",
                                       reply_markup=ReplyKeyboardRemove())
    finally:
        pdf_files.clear()
        user = update.effective_user
        await logging_request(user, 'pdf_merger')


async def pdf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'pdf_merger':
        global pdf_files
        file_id = update.message.document.file_id
        file = await context.bot.get_file(file_id)
        file_bytes = await file.download_as_bytearray()
        pdf_files.append(bytes(file_bytes))
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. ‚úÖ")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def format_converter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–í—ã–π—Ç–∏']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ —è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. üì∏',
                                    reply_markup=reply_markup)
    context.user_data['state'] = 'format_converter_waiting'
    context.user_data['photos_to_convert'] = []


async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'format_converter_waiting':
        return
    photos = update.message.photo
    if photos:
        photo_file = await photos[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        file_format = 'jpg'
        try:
            Image.open(io.BytesIO(photo_bytes)).verify()
        except Exception as e:
            await update.message.reply_text(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª. üò•')

        context.user_data['photos_to_convert'].append((photo_bytes, file_format))
    elif update.message.document and update.message.document.mime_type.startswith('image'):
        doc = update.message.document
        photo_file = await context.bot.get_file(doc.file_id)
        photo_bytes = await photo_file.download_as_bytearray()
        file_format = doc.file_name.split('.')[-1].lower()

        try:
            Image.open(io.BytesIO(photo_bytes)).verify()
        except Exception as e:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª. üò•')
            return

        context.user_data['photos_to_convert'].append((photo_bytes, file_format))
    else:
        await update.message.reply_text('–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. üñºÔ∏è')
        return

    keyboard = [['PNG', 'JPEG', 'WEBP', 'TIFF', 'SVG'], ['–í—ã–π—Ç–∏']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! ‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:',
        reply_markup=reply_markup)


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE, format: str):
    photos_to_convert = context.user_data.get('photos_to_convert', [])
    if not photos_to_convert:
        await update.message.reply_text('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.')
        return

    success_count = 0
    failure_messages = []

    for i, (photo_bytes, file_format) in enumerate(photos_to_convert):
        temp_file_path = None
        converted_file_path = None

        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_format}') as temp_file:
                temp_file.write(photo_bytes)
                temp_file_path = temp_file.name

            try:
                converted_file = convertapi.convert(
                    format, {'File': temp_file_path}
                )
            except convertapi.exceptions.ApiError as e:
                failure_messages.append(
                    f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é {i + 1}: ConvertAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑ {file_format.upper()} –≤ {format.upper()}. üò•')
                continue

            with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{format}') as converted_temp_file:
                converted_file_path = converted_temp_file.name
                converted_file.save_files(converted_file_path)

            with open(converted_file_path, 'rb') as f:
                await context.bot.send_document(chat_id=update.effective_chat.id,
                                                document=InputFile(f, filename=f"converted_image_{i + 1}.{format}"))
            success_count += 1

        except Exception as e:
            failure_messages.append(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é {i + 1}: {e}')
        finally:
            if temp_file_path:
                try:
                    os.remove(temp_file_path)
                except Exception as e:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            if converted_file_path:
                try:
                    os.remove(converted_file_path)
                except Exception as e:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

    if success_count > 0:
        await update.message.reply_text(f'–£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {success_count} —Ñ–æ—Ç–æ.')
    if failure_messages:
        for msg in failure_messages:
            await update.message.reply_text(msg)

    context.user_data['photos_to_convert'] = []
    context.user_data['state'] = 'format_converter_waiting'

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:',
                                    reply_markup=ReplyKeyboardMarkup(
                                        [['PNG', 'JPEG', 'WEBP', 'TIFF', 'SVG'], ['–í—ã–π—Ç–∏']], resize_keyboard=True))


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    if not context.user_data.get('state') is None:
        db_sess = db_session.create_session()
        if not db_sess.query(User).filter(User.account_id == user.id).first():
            new_user = User(
                account_id=user.id,
                nickname=user.username,
                surname=user.last_name,
                name=user.first_name,
            )
            db_sess.add(new_user)
            db_sess.commit()
    if text == '–í—ã–π—Ç–∏':
        context.user_data['state'] = None
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.", reply_markup=ReplyKeyboardRemove())
        return
    if context.user_data.get('state') == 'format_selection':
        if text.upper() in ['PNG', 'JPEG', 'WEBP', 'TIFF', 'SVG']:
            await photo(update, context, text.lower())
            return
    if text.upper() in ['PNG', 'JPEG', 'WEBP', 'TIFF', 'SVG']:
        context.user_data['state'] = 'format_selection'
        await photo(update, context, text.lower())
        return

    if context.user_data.get('state') == 'create_csv':
        try:
            data = [row.split(',') for row in text.split('\n')]
            with open('output.csv', 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerows(data)
            with open('output.csv', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.csv')
            context.user_data['state'] = 'menu'
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif context.user_data.get('state') == 'create_json':
        try:
            json_data = json.loads(text)
            with open('output.json', 'w') as file:
                json.dump(json_data, file, indent=4)
            with open('output.json', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.json')
            context.user_data['state'] = 'menu'
        except json.JSONDecodeError:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif context.user_data.get('state') == 'create_txt':
        with open('output.txt', 'w') as file:
            file.write(text)
        with open('output.txt', 'rb') as file:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
        os.remove('output.txt')
        context.user_data['state'] = 'menu'
    elif context.user_data.get('state') == 'pdf_merger' and text == "–ì–æ—Ç–æ–≤–æ!":
        await merge(update, context)
    elif context.user_data.get('state') == 'csv_manipulation':
        global csv_file
        if text == "–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫":
            first_rows = csv_file.head(10).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{first_rows}</pre>",
                                           parse_mode='HTML')
        elif text == "–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫":
            first_rows = csv_file.head(20).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{first_rows}</pre>",
                                           parse_mode='HTML')

        elif text == "–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫":
            first_rows = csv_file.head(30).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{first_rows}</pre>",
                                           parse_mode='HTML')

        elif text == "–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫":
            last_rows = csv_file.tail(10).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{last_rows}</pre>",
                                           parse_mode='HTML')

        elif text == "–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫":
            last_rows = csv_file.tail(20).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{last_rows}</pre>",
                                           parse_mode='HTML')

        elif text == "–í—ã–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫":
            last_rows = csv_file.tail(30).to_string(index=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<pre>{last_rows}</pre>",
                                           parse_mode='HTML')


if __name__ == '__main__':
    db_session.global_init("db/file_bot.db")
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler(['start', 'help'], help))
    application.add_handler(MessageHandler(filters.Document.MimeType("application/pdf"), pdf_handler))
    application.add_handler(MessageHandler(filters.Document.MimeType("text/plain"), reading_txt))
    application.add_handler(MessageHandler(filters.Document.MimeType("application/json"), reading_json))
    application.add_handler(CommandHandler('text_converter', reading_files))
    application.add_handler(CommandHandler('file_creator', create_files))
    application.add_handler(CommandHandler('create_csv', create_csv))
    application.add_handler(CommandHandler('create_json', create_json))
    application.add_handler(CommandHandler('create_txt', create_txt))
    application.add_handler(CommandHandler('pdf_merger', pdf_merger))
    application.add_handler(CommandHandler('format_converter', format_converter_start))
    application.add_handler(MessageHandler(filters.Document.MimeType("text/csv"), reading_csv))
    application.add_handler(CommandHandler('csv_manipulation', csv_waiting))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, image_handler))
    application.run_polling()