import fitz
import io
import os
import tempfile
import convertapi
from telegram import Update, InputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, CONVERTAPI_SECRET

convertapi.api_credentials = CONVERTAPI_SECRET


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! üëã –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç!', reply_markup=ReplyKeyboardRemove())


##################################################–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è PDF Merger################################################
pdf_files = []


def merge_pdfs(pdf_files: list[bytes]):
    merged_doc = fitz.open()
    for pdf_file in pdf_files:
        try:
            pdf_document = fitz.open(stream=pdf_file, filetype="pdf")
            merged_doc.insert_pdf(pdf_document)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
            continue
    merged_pdf_bytes = merged_doc.tobytes()
    merged_doc.close()
    return merged_pdf_bytes


async def pdf_merger_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å"],
        ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
        ["–í—ã–π—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)
    pdf_files.clear()
    context.user_data['state'] = 'pdf_merger_menu'


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–û–±—ä–µ–¥–∏–Ω–∏—Ç—å"],
        ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
        ["–í—ã–π—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = update.message.text

    if context.user_data.get('state') == 'waiting_for_pdfs' and text == "–ì–æ—Ç–æ–≤–æ!":
        await merge(update, context)
        return

    if text == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤, –∏ —è –æ–±—ä–µ–¥–∏–Ω—é –∏—Ö –≤ –æ–¥–∏–Ω. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ!'",
                                       reply_markup=ReplyKeyboardRemove())
        pdf_files.clear()
        context.user_data['state'] = 'waiting_for_pdfs'
    elif text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...",
                                       reply_markup=reply_markup)
    elif text == "–í—ã–π—Ç–∏" and context.user_data['state'] == 'pdf_merger_menu':
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = 'menu'
    elif context.user_data.get('state') == 'format_converter_waiting' and text == "–í—ã–π—Ç–∏":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       reply_markup=ReplyKeyboardRemove())
        context.user_data['state'] = 'menu'


async def pdf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pdf_files
    file_id = update.message.document.file_id
    file = await context.bot.get_file(file_id)
    file_bytes = await file.download_as_bytearray()
    pdf_files.append(bytes(file_bytes))

    keyboard = [["–ì–æ—Ç–æ–≤–æ!"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. ‚úÖ", reply_markup=reply_markup)


async def merge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pdf_files
    if not pdf_files:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. üòî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ PDF-—Ñ–∞–π–ª—ã.",
                                       reply_markup=ReplyKeyboardRemove())
        return

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–û–±—ä–µ–¥–∏–Ω—è—é —Ñ–∞–π–ª—ã... ‚è≥",
                                   reply_markup=ReplyKeyboardRemove())
    try:
        merged_pdf = merge_pdfs(pdf_files)
        if merged_pdf:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(io.BytesIO(merged_pdf), filename="merged_document.pdf"),
                caption="–í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª! üìÅ"
            )
            pdf_files.clear()
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. ‚ùå",
                                           reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} üò¢",
                                       reply_markup=ReplyKeyboardRemove())
    finally:
        pdf_files.clear()
        context.user_data['state'] = 'menu'


##########################################–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Format Converter##################################################
async def format_converter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–í—ã–π—Ç–∏']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–µ –≤ PNG. üì∏', reply_markup=reply_markup)
    context.user_data['state'] = 'format_converter_waiting'


async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != 'format_converter_waiting':
        await context.bot.send_message(chat_id=update.effective_chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        return

    temp_file_path = None
    converted_file_path = None

    try:
        file_id = update.message.photo[-1].file_id
        file_info = await context.bot.get_file(file_id)
        downloaded_file = await file_info.download_as_bytearray()
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            temp_file.write(downloaded_file)
            temp_file_path = temp_file.name
        converted_file = convertapi.convert(
            'png', {'File': temp_file_path}
        )
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as converted_temp_file:
            converted_file_path = converted_temp_file.name
            converted_file.save_files(converted_file_path)
        with open(converted_file_path, 'rb') as f:
            await context.bot.send_document(chat_id=update.effective_chat.id,
                                            document=InputFile(f, filename="converted_image.png"))

    except Exception as e:
        await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e} üò•')
    finally:
        if temp_file_path:
            try:
                os.remove(temp_file_path)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        if converted_file_path:
            try:
                os.remove(converted_file_path)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")


if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    # Handlers –¥–ª—è PDF Merger
    pdf_merger_start_handler = CommandHandler('pdf_merger', pdf_merger_start)
    application.add_handler(pdf_merger_start_handler)
    handle_text = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    application.add_handler(handle_text)
    pdf_handler_instance = MessageHandler(filters.Document.MimeType("application/pdf"), pdf_handler)
    application.add_handler(pdf_handler_instance)

    # Handlers –¥–ª—è Format Converter
    format_converter_start_handler = CommandHandler('format_converter', format_converter_start)
    application.add_handler(format_converter_start_handler)
    photo_handler = MessageHandler(filters.PHOTO, photo)
    application.add_handler(photo_handler)

    application.run_polling()
