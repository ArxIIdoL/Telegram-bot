import csv
import json
import logging
import os

from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

from config import BOT_TOKEN

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


async def reading_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'reading_files'
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.txt, .csv, .json), –∞ —è –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")


async def create_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'create_files'
    keyboard = [
        ["/create_csv"],
        ["/create_json"],
        ["/create_txt"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=reply_markup)


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'menu'
    text = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã! –Ø ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏.
    –í–æ—Ç –ø–µ—Ä–µ—á–µ–Ω—å –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    \t* –ó–∞–ø–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF-—Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω
    \t* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞—à–∏—Ö TXT –∏ CSV —Ñ–∞–π–ª–æ–≤
    \t* –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ PDF-—Ñ–∞–π–ª–æ–≤
    \t* –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö CSV, JSON –∏ TXT —Ñ–∞–π–ª–æ–≤
    \t* –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–µ–∂–∏–º
    \t* –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏.
    """
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=text, reply_markup=ReplyKeyboardRemove())


async def reading_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'text/plain':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def reading_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'text/csv':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            csv_data = list(csv.reader(text.splitlines()))
            formatted_csv = "\n".join([", ".join(row) for row in csv_data])
            await context.bot.send_message(chat_id=update.effective_chat.id, text=formatted_csv)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def reading_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'reading_files':
        document = update.message.document
        if document.mime_type == 'application/json':
            file = await document.get_file()
            file_content = await file.download_as_bytearray()
            text = file_content.decode('utf-8')
            json_data = json.loads(text)
            formatted_json = json.dumps(json_data, indent=4, ensure_ascii=False)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=formatted_json)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!")


async def create_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV —Ñ–∞–π–ª–∞ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∑–∞–ø—è—Ç—ã–º–∏):")
    context.user_data['state'] = 'create_csv'


async def create_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON —Ñ–∞–π–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):")
    context.user_data['state'] = 'create_json'


async def create_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TXT —Ñ–∞–π–ª–∞:")
    context.user_data['state'] = 'create_txt'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if context.user_data.get('state') == 'create_csv':
        try:
            data = [row.split(',') for row in text.split('\n')]
            with open('output.csv', 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerows(data)
            with open('output.csv', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.csv')
            context.user_data['state'] = 'menu'
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif context.user_data.get('state') == 'create_json':
        try:
            json_data = json.loads(text)
            with open('output.json', 'w') as file:
                json.dump(json_data, file, indent=4)
            with open('output.json', 'rb') as file:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
            os.remove('output.json')
            context.user_data['state'] = 'menu'
        except json.JSONDecodeError:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    elif context.user_data.get('state') == 'create_txt':
        with open('output.txt', 'w') as file:
            file.write(text)
        with open('output.txt', 'rb') as file:
            await context.bot.send_document(chat_id=update.effective_chat.id, document=file)
        os.remove('output.txt')
        context.user_data['state'] = 'menu'


if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    start_handler = CommandHandler(['start', 'help'], help)
    text_converter_handler = CommandHandler('text_converter', reading_files)
    txt_handler = MessageHandler(filters.Document.MimeType("text/plain"), reading_txt)
    csv_handler = MessageHandler(filters.Document.MimeType("text/csv"), reading_csv)
    json_handler = MessageHandler(filters.Document.MimeType("application/json"), reading_json)
    create_create_files_handler = CommandHandler('file_creator', create_files)
    create_csv_handler = CommandHandler('create_csv', create_csv)
    create_json_handler = CommandHandler('create_json', create_json)
    create_txt_handler = CommandHandler('create_txt', create_txt)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    application.add_handler(start_handler)
    application.add_handler(text_converter_handler)
    application.add_handler(txt_handler)
    application.add_handler(csv_handler)
    application.add_handler(json_handler)
    application.add_handler(create_create_files_handler)
    application.add_handler(create_csv_handler)
    application.add_handler(create_json_handler)
    application.add_handler(create_txt_handler)
    application.add_handler(text_handler)
    application.run_polling()